/**:  # This applies to all nodes
  ros__parameters:

    control_type: "rc" # or "rc" or "joy"

    # Defines the index position where the speed, steering, and mode values are stored in the JOY message
    rc_speed_axis: 1        # Index for speed axis
    rc_steering_axis: 0     # Index for steering axis
    rc_mode_button: 0       # Index for mode button

    joy_speed_axis: 4
    joy_steering_axis: 3
    joy_mode_button: 4 
    joy_auto_button: 5 

    # Minimum ERPM Configuration:
    # The minimum ERPM value is specified in the VESC motor configuration, under:
    # VESC Tool 6: Motor Settings > PID Controllers > Minimum ERPM.
    # It's crucial to use the same minimum ERPM value here to ensure consistency.
    # The MXcarKit applies brakes when the ERPM falls below this minimum value.
    # Additionally, engaging the deadman switch will trigger braking.
    erpm_min: 700

    # Formula for converting speed (in m/s) to ERPM (Electronic RPM)
    # erpm = speed_to_erpm_gain * speed (in m/s)
    speed_to_erpm_gain: 3786  # Gain for converting speed to ERPM

rc_to_joy:
  ros__parameters:
    # rc signal
    # move all joysticks on the remote control and watch the pwm values 
    # ros topic echo /veh_remote_control
    steering_min_pwm: 1000
    steering_mid_pwm: 1500
    steering_max_pwm: 2000

    speed_min_pwm: 1000
    speed_mid_pwm: 1500
    speed_max_pwm: 2000

    mode_min_pwm: 1000
    mode_mid_pwm: 1500
    mode_max_pwm: 2000

# ros2 topic pub /veh_remote_ctrl mxcarkit_vehctrl_message/msg/VehCtrlCustomMessage \
# "{stamp: {sec: 0, nanosec: 0}, remote_pwm: 1500, steering_pwm: 1520, throttle_pwm: 1300}"

joy_to_ackermann:
  ros__parameters:
    
    steering_angle_max: 0.44  # Maximum steering angle in radians (+/-)

    max_backward_speed: -2.0  # Minimum speed, represents maximum reverse speed in m/s
    max_forward_speed: 2.0   # Maximum speed, represents maximum forward speed in m/s

    joy_deadzone: 0.07

ackermann_to_vesc:
  ros__parameters:

    ### Ackermann to VESC Configuration ###
    # Servo values (/commands/servo/position) ranging from 0 to 1
    # 0 is steering completely to the left, and 1 is steering completely to the right
    servo_max: 0.9    # Max servo position, prevents steering block by not going fully right
    servo_min: 0.1    # Min servo position, prevents steering block by not going fully left
    servo_mid: 0.443  # Mid servo position, represents neutral steering position

    # VESC braking current in Ampere
    brake_amps: -20.0

    # Formula for converting steering angle (in radians) to servo position
    # steering_val = steer_to_servo_gain * steering_angle (in radians)
    steer_to_servo_gain: 1.0  # Gain for converting steering angle to servo position

    # Defines the VESC controller signal for different modes or an emergency brake
    # rc_dead_value: don't drive, rc_auto_value: drive autonomously, rc_manu_value: drive manually
    rc_dead_value: 0  # Don't drive
    rc_auto_value: 1  # Drive autonomously
    rc_manu_value: 2  # Drive manually

    joy_dead_value: 0  # Don't drive
    joy_manu_value: 1  # Drive manually
    joy_auto_value: 2  # Drive autonomously (not enabled in joy mode)

    invert_steering: true